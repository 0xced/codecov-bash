#!/bin/bash

version="0.0.1"

if [ "$JENKINS_URL" != "" ];
then
    # https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project
    query="service=jenkins&branch=$GIT_BRANCH&commit=$GIT_COMMIT&build=$BUILD_NUMBER&build_url=$BUILD_URL"
    cd "$WORKSPACE"

elif [ "$CI" = "true" ] && [ "$TRAVIS" = "true" ];
then
    # http://docs.travis-ci.com/user/ci-environment/#Environment-variables
    owner=$(echo $TRAVIS_REPO_SLUG | cut -d / -f 1)
    repo=$(echo $TRAVIS_REPO_SLUG | cut -d / -f 2)
    query="service=travis-org&branch=$TRAVIS_BRANCH&commit=$TRAVIS_COMMIT&build=$TRAVIS_JOB_NUMBER&pull_request=$TRAVIS_PULL_REQUEST&travis_job_id=$TRAVIS_JOB_ID&owner=$owner&repo=$repo"
    cd "$TRAVIS_BUILD_DIR"

elif [ "$CI" = "true" ] && [ "$CI_NAME" = "codeship" ];
then
    # https://www.codeship.io/documentation/continuous-integration/set-environment-variables/
    query="service=codeship&branch=$CI_BRANCH&build=$CI_BUILD_NUMBER&build_url=$CI_BUILD_URL&commit=$CI_COMMIT_ID"

elif [ "$CI" = "true" ] && [ "$CIRCLECI" = "true" ];
then
    # https://circleci.com/docs/environment-variables
    query="service=circleci&branch=$CIRCLE_BRANCH&build=$CIRCLE_BUILD_NUM&owner=$CIRCLE_PROJECT_USERNAME&repo=$CIRCLE_PROJECT_REPONAME&commit=$CIRCLE_SHA1"

elif [ "$CI" = "true" ] && [ "$SEMAPHORE" = "true" ];
then
    # https://semaphoreapp.com/docs/available-environment-variables.html
    owner=$(echo $SEMAPHORE_REPO_SLUG | cut -d / -f 1)
    repo=$(echo $SEMAPHORE_REPO_SLUG | cut -d / -f 2)
    query="service=semaphore&branch=$BRANCH_NAME&build=$SEMAPHORE_BUILD_NUMBER&owner=$owner&repo=$repo&commit=$REVISION"

elif [ "$CI" = "true" ] && [ "$DRONE" = "true" ];
then
    # http://docs.drone.io/env.html
    query="service=drone.io&branch=$DRONE_BRANCH&build=$DRONE_BUILD_NUMBER&build_url=$DRONE_BUILD_URL&commit=$DRONE_COMMIT"

elif [ "$CI" = "True" ] && [ "$APPVEYOR" = "True" ];
then
    # http://www.appveyor.com/docs/environment-variables
    owner=$(echo $APPVEYOR_REPO_NAME | cut -d / -f 1)
    repo=$(echo $APPVEYOR_REPO_NAME | cut -d / -f 2)
    query="service=appveyor&branch=$APPVEYOR_REPO_BRANCH&build=$APPVEYOR_BUILD_NUMBER&owner=$owner&repo=$repo&commit=$APPVEYOR_REPO_COMMIT"

elif [ "$CI" = "True" ] && [ "$WERCKER_GIT_BRANCH" != "" ];
then
    # http://devcenter.wercker.com/articles/steps/variables.html
    query="service=wercker&branch=$WERCKER_GIT_BRANCH&build=$WERCKER_MAIN_PIPELINE_STARTED&owner=$WERCKER_GIT_OWNER&repo=$WERCKER_GIT_REPOSITORY&commit=$WERCKER_GIT_COMMIT"

elif [ "$SHIPPABLE" = "true" ];
then
    # http://docs.shippable.com/en/latest/config.html#common-environment-variables
    owner=$(echo $REPO_NAME | cut -d / -f 1)
    repo=$(echo $REPO_NAME | cut -d / -f 2)
    query="service=shippable&branch=$BRANCH&build=$BUILD_NUMBER&build_url=$BUILD_URL&pull_request=$PULL_REQUEST&owner=$owner&repo=$repo&commit=$COMMIT"

else:
    # find branch, commit, repo from git command
    branch=$(git rev-parse --abbrev-ref HEAD)
    if [ "$branch" = "HEAD" ];
    then
        branch="master"
    fi;
    commit=$(git rev-parse HEAD)
    query="branch=$branch&commit=$commit"
fi;

files=$(find . -name 'coverage.xml' \
           -or -name 'coverage.json' \
           -or -name 'jacoco.xml' \
           -or -name 'jacocoTestReport.xml' \
           -or -name 'clover.xml' \
           -or -name 'coverage.txt' \
           -or -name 'cobertura.xml' \
           -or -name 'jacoco.xml' \
           -or -name 'lcov.info' \
           -or -name 'gcov.info')

# no files found
if [ "$files" = "" ];
then
  # python coverage command found
  if [ "$(which coverage)" != "" ];
  then
    # run python coverage
    if [ "$(coverage xml)" != "No data to report." ];
    then
      files="coverage.xml"
    else
      echo "Report could not be generated."
      exit 1;
    fi
  else
    echo "No coverage report detected."
    exit 1;
  fi
fi

# need file tree to find true file paths
all_report=$(find . | grep -v -e 'venv/bin' \
                              -e 'venv/lib' \
                              -e 'build/lib' \
                              -e '.git/' \
                              -e '/tests/' \
                              -e '.egg-info/' \
                              -e '/vendor/' \
                              -e 'Sites/www/bower/' \
                              -e 'virtualenv/' \
                              -e 'node_modules/' \
                              -e 'bower_components/' \
                              -e 'coverage/instrumented' | tr " " "\n")

for file in $files
do
    report=$(cat "$file")
    all_report+="\n<<<<<< EOF\n$report"
done

curl --silent \
     -X POST \
     -d "$all_report" \
     -H "Accept: text/plain" \
     -H "Content-Type: text/plain" \
     "https://codecov.io/upload/v2?package=bash-v$version&$query"
